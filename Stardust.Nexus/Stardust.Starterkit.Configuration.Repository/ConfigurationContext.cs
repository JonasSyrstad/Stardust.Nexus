// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;
using JetBrains.Annotations;
using Stardust.Interstellar.ConfigurationReader;
using Stardust.Particles;

namespace Stardust.Nexus.Repository
{
    public partial class ConfigurationContext : BrightstarEntityContext {
    	
        static ConfigurationContext() 
        {
            var provider = new ReflectionMappingProvider();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(ISettings));
            EntityMappingStore.Instance.SetImplMapping<ISettings, Settings>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(ISiteEncryptions));
            EntityMappingStore.Instance.SetImplMapping<ISiteEncryptions, SiteEncryptions>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IConfigSet));
            EntityMappingStore.Instance.SetImplMapping<IConfigSet, ConfigSet>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IConfigUser));
            EntityMappingStore.Instance.SetImplMapping<IConfigUser, ConfigUser>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IEndpoint));
            EntityMappingStore.Instance.SetImplMapping<IEndpoint, Endpoint>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IEndpointParameter));
            EntityMappingStore.Instance.SetImplMapping<IEndpointParameter, EndpointParameter>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IEnvironment));
            EntityMappingStore.Instance.SetImplMapping<IEnvironment, Environment>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(ICacheSettings));
            EntityMappingStore.Instance.SetImplMapping<ICacheSettings, CacheSettings>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IEnvironmentParameter));
            EntityMappingStore.Instance.SetImplMapping<IEnvironmentParameter, EnvironmentParameter>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IServiceDescription));
            EntityMappingStore.Instance.SetImplMapping<IServiceDescription, ServiceDescription>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IServiceHostParameter));
            EntityMappingStore.Instance.SetImplMapping<IServiceHostParameter, ServiceHostParameter>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(IServiceHostSettings));
            EntityMappingStore.Instance.SetImplMapping<IServiceHostSettings, ServiceHostSettings>();
            provider.AddMappingsForType(EntityMappingStore.Instance, typeof(ISubstitutionParameter));
            EntityMappingStore.Instance.SetImplMapping<ISubstitutionParameter, SubstitutionParameter>();
        }
    	
        /// <summary>
        /// Initialize a new entity context using the specified BrightstarDB
        /// Data Object Store connection
        /// </summary>
        /// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
        public ConfigurationContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
        {
            InitializeContext();
        }
    
        /// <summary>
        /// Initialize a new entity context using the specified Brightstar connection string
        /// </summary>
        /// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
        /// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
        public ConfigurationContext(
            string connectionString, 
            bool? enableOptimisticLocking=null,
            string updateGraphUri = null,
            IEnumerable<string> datasetGraphUris = null,
            string versionGraphUri = null
            ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
        {
            InitializeContext();
        }
    
        /// <summary>
        /// Initialize a new entity context using the specified Brightstar
        /// connection string retrieved from the configuration.
        /// </summary>
        public ConfigurationContext() : base()
        {
            InitializeContext();
        }
    	
        /// <summary>
        /// Initialize a new entity context using the specified Brightstar
        /// connection string retrieved from the configuration and the
        //  specified target graphs
        /// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
        public ConfigurationContext(
            string updateGraphUri,
            IEnumerable<string> datasetGraphUris,
            string versionGraphUri
            ) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
        {
            InitializeContext();
        }
    	
        private void InitializeContext() 
        {
            Settingss = 	new BrightstarEntitySet<ISettings>(this);
            SiteEncryptionss = 	new BrightstarEntitySet<ISiteEncryptions>(this);
            ConfigSets = 	new BrightstarEntitySet<IConfigSet>(this);
            ConfigUsers = 	new BrightstarEntitySet<IConfigUser>(this);
            Endpoints = 	new BrightstarEntitySet<IEndpoint>(this);
            EndpointParameters = 	new BrightstarEntitySet<IEndpointParameter>(this);
            Environments = 	new BrightstarEntitySet<IEnvironment>(this);
            CacheSettingss = 	new BrightstarEntitySet<ICacheSettings>(this);
            EnvironmentParameters = 	new BrightstarEntitySet<IEnvironmentParameter>(this);
            ServiceDescriptions = 	new BrightstarEntitySet<IServiceDescription>(this);
            ServiceHostParameters = 	new BrightstarEntitySet<IServiceHostParameter>(this);
            ServiceHostSettingss = 	new BrightstarEntitySet<IServiceHostSettings>(this);
            SubstitutionParameters = 	new BrightstarEntitySet<ISubstitutionParameter>(this);
        }
    	
        public IEntitySet<ISettings> Settingss
        {
            get; private set;
        }
    	
        public IEntitySet<ISiteEncryptions> SiteEncryptionss
        {
            get; private set;
        }
    	
        public IEntitySet<IConfigSet> ConfigSets
        {
            get; private set;
        }
    	
        public IEntitySet<IConfigUser> ConfigUsers
        {
            get; private set;
        }
    	
        public IEntitySet<IEndpoint> Endpoints
        {
            get; private set;
        }
    	
        public IEntitySet<IEndpointParameter> EndpointParameters
        {
            get; private set;
        }
    	
        public IEntitySet<IEnvironment> Environments
        {
            get; private set;
        }
    	
        public IEntitySet<ICacheSettings> CacheSettingss
        {
            get; private set;
        }
    	
        public IEntitySet<IEnvironmentParameter> EnvironmentParameters
        {
            get; private set;
        }
    	
        public IEntitySet<IServiceDescription> ServiceDescriptions
        {
            get; private set;
        }
    	
        public IEntitySet<IServiceHostParameter> ServiceHostParameters
        {
            get; private set;
        }
    	
        public IEntitySet<IServiceHostSettings> ServiceHostSettingss
        {
            get; private set;
        }
    	
        public IEntitySet<ISubstitutionParameter> SubstitutionParameters
        {
            get; private set;
        }
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(ISettings))) {
                return (IEntitySet<T>)this.Settingss;
            }
            if (typeof(T).Equals(typeof(ISiteEncryptions))) {
                return (IEntitySet<T>)this.SiteEncryptionss;
            }
            if (typeof(T).Equals(typeof(IConfigSet))) {
                return (IEntitySet<T>)this.ConfigSets;
            }
            if (typeof(T).Equals(typeof(IConfigUser))) {
                return (IEntitySet<T>)this.ConfigUsers;
            }
            if (typeof(T).Equals(typeof(IEndpoint))) {
                return (IEntitySet<T>)this.Endpoints;
            }
            if (typeof(T).Equals(typeof(IEndpointParameter))) {
                return (IEntitySet<T>)this.EndpointParameters;
            }
            if (typeof(T).Equals(typeof(IEnvironment))) {
                return (IEntitySet<T>)this.Environments;
            }
            if (typeof(T).Equals(typeof(ICacheSettings))) {
                return (IEntitySet<T>)this.CacheSettingss;
            }
            if (typeof(T).Equals(typeof(IEnvironmentParameter))) {
                return (IEntitySet<T>)this.EnvironmentParameters;
            }
            if (typeof(T).Equals(typeof(IServiceDescription))) {
                return (IEntitySet<T>)this.ServiceDescriptions;
            }
            if (typeof(T).Equals(typeof(IServiceHostParameter))) {
                return (IEntitySet<T>)this.ServiceHostParameters;
            }
            if (typeof(T).Equals(typeof(IServiceHostSettings))) {
                return (IEntitySet<T>)this.ServiceHostSettingss;
            }
            if (typeof(T).Equals(typeof(ISubstitutionParameter))) {
                return (IEntitySet<T>)this.SubstitutionParameters;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
    } // end class ConfigurationContext

    public partial class Settings : BrightstarEntityObject, ISettings 
    {
        public Settings(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Settings(BrightstarEntityContext context) : base(context, typeof(Settings)) { }
        public Settings() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.ISettings
    
        public System.String MasterEncryptionKey
        {
            get { return GetRelatedProperty<System.String>("MasterEncryptionKey"); }
            set { SetRelatedProperty("MasterEncryptionKey", value); }
        }
        public System.Collections.Generic.ICollection<ISiteEncryptions> SiteEncryptions
        {
            get { return GetRelatedObjects<ISiteEncryptions>("SiteEncryptions"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SiteEncryptions", value); }
        }
        #endregion
    }

    public partial class SiteEncryptions : BrightstarEntityObject, ISiteEncryptions 
    {
        public SiteEncryptions(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SiteEncryptions(BrightstarEntityContext context) : base(context, typeof(SiteEncryptions)) { }
        public SiteEncryptions() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.ISiteEncryptions
    
        public System.String SiteEncryptionKey
        {
            get { return GetRelatedProperty<System.String>("SiteEncryptionKey"); }
            set { SetRelatedProperty("SiteEncryptionKey", value); }
        }
    
        public IConfigSet Site
        {
            get { return GetRelatedObject<IConfigSet>("Site"); }
            set { SetRelatedObject<IConfigSet>("Site", value); }
        }
    
        public ISettings Settings
        {
            get { return GetRelatedObject<ISettings>("Settings"); }
            set { SetRelatedObject<ISettings>("Settings", value); }
        }
        #endregion
    }

    public partial class ConfigSet : BrightstarEntityObject, IConfigSet 
    {
        public ConfigSet(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ConfigSet(BrightstarEntityContext context) : base(context, typeof(ConfigSet)) { }
        public ConfigSet() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IConfigSet
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String System
        {
            get { return GetRelatedProperty<System.String>("System"); }
            set { SetRelatedProperty("System", value); }
        }
        public System.Collections.Generic.ICollection<IEnvironment> Environments
        {
            get { return GetRelatedObjects<IEnvironment>("Environments"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Environments", value); }
        }
        public System.Collections.Generic.ICollection<IServiceHostSettings> ServiceHosts
        {
            get { return GetRelatedObjects<IServiceHostSettings>("ServiceHosts"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ServiceHosts", value); }
        }
        public System.Collections.Generic.ICollection<IServiceDescription> Services
        {
            get { return GetRelatedObjects<IServiceDescription>("Services"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Services", value); }
        }
    
        public IConfigSet ParentConfigSet
        {
            get { return GetRelatedObject<IConfigSet>("ParentConfigSet"); }
            set { SetRelatedObject<IConfigSet>("ParentConfigSet", value); }
        }
        public System.Collections.Generic.ICollection<IConfigSet> ChildConfigSets
        {
            get { return GetRelatedObjects<IConfigSet>("ChildConfigSets"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildConfigSets", value); }
        }
    
        public System.DateTime Created
        {
            get { return GetRelatedProperty<System.DateTime>("Created"); }
            set { SetRelatedProperty("Created", value); }
        }
    
        public System.DateTime LastUpdate
        {
            get { return GetRelatedProperty<System.DateTime>("LastUpdate"); }
            set { SetRelatedProperty("LastUpdate", value); }
        }
        public System.Collections.Generic.ICollection<IConfigUser> Administrators
        {
            get { return GetRelatedObjects<IConfigUser>("Administrators"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Administrators", value); }
        }
    
        public System.String Description
        {
            get { return GetRelatedProperty<System.String>("Description"); }
            set { SetRelatedProperty("Description", value); }
        }
    
        public System.String LayerNames
        {
            get { return GetRelatedProperty<System.String>("LayerNames"); }
            set { SetRelatedProperty("LayerNames", value); }
        }
    
        public System.String ReaderKey
        {
            get { return GetRelatedProperty<System.String>("ReaderKey"); }
            set { SetRelatedProperty("ReaderKey", value); }
        }
    
        public System.Boolean AllowAccessWithRootKey
        {
            get { return GetRelatedProperty<System.Boolean>("AllowAccessWithRootKey"); }
            set { SetRelatedProperty("AllowAccessWithRootKey", value); }
        }
    
        public System.Boolean AllowAccessWithUserTokens
        {
            get { return GetRelatedProperty<System.Boolean>("AllowAccessWithUserTokens"); }
            set { SetRelatedProperty("AllowAccessWithUserTokens", value); }
        }
    
        public ISiteEncryptions CryptoKey
        {
            get { return GetRelatedObject<ISiteEncryptions>("CryptoKey"); }
            set { SetRelatedObject<ISiteEncryptions>("CryptoKey", value); }
        }
        #endregion
    }

    public partial class ConfigUser : BrightstarEntityObject, IConfigUser 
    {
        public ConfigUser(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ConfigUser(BrightstarEntityContext context) : base(context, typeof(ConfigUser)) { }
        public ConfigUser() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IConfigUser
    
        public System.String NameId
        {
            get { return GetRelatedProperty<System.String>("NameId"); }
            set { SetRelatedProperty("NameId", value); }
        }
        public System.Collections.Generic.ICollection<IConfigSet> ConfigSet
        {
            get { return GetRelatedObjects<IConfigSet>("ConfigSet"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ConfigSet", value); }
        }
    
        public System.String FirstName
        {
            get { return GetRelatedProperty<System.String>("FirstName"); }
            set { SetRelatedProperty("FirstName", value); }
        }
    
        public System.String LastName
        {
            get { return GetRelatedProperty<System.String>("LastName"); }
            set { SetRelatedProperty("LastName", value); }
        }
    	
        [DisplayName("Role")]
        public AdministratorTypes AdministratorType
        {
            get { return GetRelatedProperty<AdministratorTypes>("AdministratorType"); }
            set { SetRelatedProperty("AdministratorType", value); }
        }
    
        public System.String AccessToken
        {
            get { return GetRelatedProperty<System.String>("AccessToken"); }
            set { SetRelatedProperty("AccessToken", value); }
        }
        #endregion
    }

    public partial class Endpoint : BrightstarEntityObject, IEndpoint 
    {
        public Endpoint(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Endpoint(BrightstarEntityContext context) : base(context, typeof(Endpoint)) { }
        public Endpoint() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IEndpoint
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    
        public System.String ServiceNameId
        {
            get { return GetRelatedProperty<System.String>("ServiceNameId"); }
            set { SetRelatedProperty("ServiceNameId", value); }
        }
        public System.Collections.Generic.ICollection<IEndpoint> ChildEndpoints
        {
            get { return GetRelatedObjects<IEndpoint>("ChildEndpoints"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildEndpoints", value); }
        }
    
        public IEndpoint ParentEndpoint
        {
            get { return GetRelatedObject<IEndpoint>("ParentEndpoint"); }
            set { SetRelatedObject<IEndpoint>("ParentEndpoint", value); }
        }
    
        public IServiceDescription ServiceDescription
        {
            get { return GetRelatedObject<IServiceDescription>("ServiceDescription"); }
            set { SetRelatedObject<IServiceDescription>("ServiceDescription", value); }
        }
        public System.Collections.Generic.ICollection<IEndpointParameter> Parameters
        {
            get { return GetRelatedObjects<IEndpointParameter>("Parameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Parameters", value); }
        }
        #endregion
    }

    public partial class EndpointParameter : BrightstarEntityObject, IEndpointParameter 
    {
        public EndpointParameter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public EndpointParameter(BrightstarEntityContext context) : base(context, typeof(EndpointParameter)) { }
        public EndpointParameter() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IEndpointParameter
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    
        public IEndpoint Endpoint
        {
            get { return GetRelatedObject<IEndpoint>("Endpoint"); }
            set { SetRelatedObject<IEndpoint>("Endpoint", value); }
        }
    
        public System.String EndpointNameId
        {
            get { return GetRelatedProperty<System.String>("EndpointNameId"); }
            set { SetRelatedProperty("EndpointNameId", value); }
        }
    
        public IEndpointParameter Parent
        {
            get { return GetRelatedObject<IEndpointParameter>("Parent"); }
            set { SetRelatedObject<IEndpointParameter>("Parent", value); }
        }
        public System.Collections.Generic.ICollection<IEndpointParameter> ChildParameters
        {
            get { return GetRelatedObjects<IEndpointParameter>("ChildParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildParameters", value); }
        }
    
        public System.String ItemValue
        {
            get { return GetRelatedProperty<System.String>("ItemValue"); }
            set { SetRelatedProperty("ItemValue", value); }
        }
    	
        [DisplayName("Environmental")]
        public System.Boolean ConfigurableForEachEnvironment
        {
            get { return GetRelatedProperty<System.Boolean>("ConfigurableForEachEnvironment"); }
            set { SetRelatedProperty("ConfigurableForEachEnvironment", value); }
        }
    
        public System.Boolean IsPerService
        {
            get { return GetRelatedProperty<System.Boolean>("IsPerService"); }
            set { SetRelatedProperty("IsPerService", value); }
        }
        public System.Collections.Generic.ICollection<ISubstitutionParameter> SubstitutionParameters
        {
            get { return GetRelatedObjects<ISubstitutionParameter>("SubstitutionParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubstitutionParameters", value); }
        }
        public System.Collections.Generic.ICollection<IServiceHostParameter> HostParameters
        {
            get { return GetRelatedObjects<IServiceHostParameter>("HostParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("HostParameters", value); }
        }
        #endregion
    }

    public partial class Environment : BrightstarEntityObject, IEnvironment 
    {
        public Environment(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Environment(BrightstarEntityContext context) : base(context, typeof(Environment)) { }
        public Environment() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IEnvironment
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    
        public System.String ConfigSetNameId
        {
            get { return GetRelatedProperty<System.String>("ConfigSetNameId"); }
            set { SetRelatedProperty("ConfigSetNameId", value); }
        }
    
        public IConfigSet ConfigSet
        {
            get { return GetRelatedObject<IConfigSet>("ConfigSet"); }
            set { SetRelatedObject<IConfigSet>("ConfigSet", value); }
        }
    
        public IEnvironment ParentEnvironment
        {
            get { return GetRelatedObject<IEnvironment>("ParentEnvironment"); }
            set { SetRelatedObject<IEnvironment>("ParentEnvironment", value); }
        }
        public System.Collections.Generic.ICollection<IEnvironment> ChildEnvironments
        {
            get { return GetRelatedObjects<IEnvironment>("ChildEnvironments"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildEnvironments", value); }
        }
        public System.Collections.Generic.ICollection<ISubstitutionParameter> SubstitutionParameters
        {
            get { return GetRelatedObjects<ISubstitutionParameter>("SubstitutionParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubstitutionParameters", value); }
        }
        public System.Collections.Generic.ICollection<IEnvironmentParameter> EnvironmentParameters
        {
            get { return GetRelatedObjects<IEnvironmentParameter>("EnvironmentParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("EnvironmentParameters", value); }
        }
    
        public ICacheSettings CacheType
        {
            get { return GetRelatedObject<ICacheSettings>("CacheType"); }
            set { SetRelatedObject<ICacheSettings>("CacheType", value); }
        }
    
        public System.String Description
        {
            get { return GetRelatedProperty<System.String>("Description"); }
            set { SetRelatedProperty("Description", value); }
        }
    
        public System.String ReaderKey
        {
            get { return GetRelatedProperty<System.String>("ReaderKey"); }
            set { SetRelatedProperty("ReaderKey", value); }
        }
    
        public System.String ETag
        {
            get { return GetRelatedProperty<System.String>("ETag"); }
            set { SetRelatedProperty("ETag", value); }
        }
    	
        [DisplayName("Last updated")]
        public System.DateTime LastPublish
        {
            get { return GetRelatedProperty<System.DateTime>("LastPublish"); }
            set { SetRelatedProperty("LastPublish", value); }
        }
        #endregion
    }

    public partial class CacheSettings : BrightstarEntityObject, ICacheSettings 
    {
        public CacheSettings(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public CacheSettings(BrightstarEntityContext context) : base(context, typeof(CacheSettings)) { }
        public CacheSettings() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.ICacheSettings
    
        public System.String CacheImplementation
        {
            get { return GetRelatedProperty<System.String>("CacheImplementation"); }
            set { SetRelatedProperty("CacheImplementation", value); }
        }
    
        public IEnvironment Environment
        {
            get { return GetRelatedObject<IEnvironment>("Environment"); }
            set { SetRelatedObject<IEnvironment>("Environment", value); }
        }
    
        public System.Boolean NotifyOnChange
        {
            get { return GetRelatedProperty<System.Boolean>("NotifyOnChange"); }
            set { SetRelatedProperty("NotifyOnChange", value); }
        }
    
        public System.String CacheName
        {
            get { return GetRelatedProperty<System.String>("CacheName"); }
            set { SetRelatedProperty("CacheName", value); }
        }
    	
        [DisplayName("Machine names")]
        public System.String MachineNames
        {
            get { return GetRelatedProperty<System.String>("MachineNames"); }
            set { SetRelatedProperty("MachineNames", value); }
        }
    
        public System.Int32 Port
        {
            get { return GetRelatedProperty<System.Int32>("Port"); }
            set { SetRelatedProperty("Port", value); }
        }
    
        public System.Boolean Secure
        {
            get { return GetRelatedProperty<System.Boolean>("Secure"); }
            set { SetRelatedProperty("Secure", value); }
        }
    
        public System.String PassPhrase
        {
            get { return GetRelatedProperty<System.String>("PassPhrase"); }
            set { SetRelatedProperty("PassPhrase", value); }
        }
    
        public System.String SecurityMode
        {
            get { return GetRelatedProperty<System.String>("SecurityMode"); }
            set { SetRelatedProperty("SecurityMode", value); }
        }
    
        public System.String ProtectionLevel
        {
            get { return GetRelatedProperty<System.String>("ProtectionLevel"); }
            set { SetRelatedProperty("ProtectionLevel", value); }
        }
        #endregion
    }

    public partial class EnvironmentParameter : BrightstarEntityObject, IEnvironmentParameter 
    {
        public EnvironmentParameter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public EnvironmentParameter(BrightstarEntityContext context) : base(context, typeof(EnvironmentParameter)) { }
        public EnvironmentParameter() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    
        public System.String EnvironmentNameId
        {
            get { return GetRelatedProperty<System.String>("EnvironmentNameId"); }
            set { SetRelatedProperty("EnvironmentNameId", value); }
        }
    
        public IEnvironment Environment
        {
            get { return GetRelatedObject<IEnvironment>("Environment"); }
            set { SetRelatedObject<IEnvironment>("Environment", value); }
        }
    
        public IEnvironmentParameter Parent
        {
            get { return GetRelatedObject<IEnvironmentParameter>("Parent"); }
            set { SetRelatedObject<IEnvironmentParameter>("Parent", value); }
        }
        public System.Collections.Generic.ICollection<IEnvironmentParameter> ChildParameters
        {
            get { return GetRelatedObjects<IEnvironmentParameter>("ChildParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildParameters", value); }
        }
    
        public System.String ItemValue
        {
            get { return GetRelatedProperty<System.String>("ItemValue"); }
            set { SetRelatedProperty("ItemValue", value); }
        }
    
        public System.Boolean IsSecureString
        {
            get { return GetRelatedProperty<System.Boolean>("IsSecureString"); }
            set { SetRelatedProperty("IsSecureString", value); }
        }
    
        public System.Byte[] BinaryValue
        {
            get { return GetRelatedProperty<System.Byte[]>("BinaryValue"); }
            set { SetRelatedProperty("BinaryValue", value); }
        }
        #endregion
    }

    public partial class ServiceDescription : BrightstarEntityObject, IServiceDescription 
    {
        public ServiceDescription(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ServiceDescription(BrightstarEntityContext context) : base(context, typeof(ServiceDescription)) { }
        public ServiceDescription() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IServiceDescription
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    	
        [DisplayName("Client endpoint")]
        public System.String ClientEndpointValue
        {
            get { return GetRelatedProperty<System.String>("ClientEndpointValue"); }
            set { SetRelatedProperty("ClientEndpointValue", value); }
        }
    
        public IConfigSet ConfigSet
        {
            get { return GetRelatedObject<IConfigSet>("ConfigSet"); }
            set { SetRelatedObject<IConfigSet>("ConfigSet", value); }
        }
    
        public System.String ConfigSetNameId
        {
            get { return GetRelatedProperty<System.String>("ConfigSetNameId"); }
            set { SetRelatedProperty("ConfigSetNameId", value); }
        }
        public System.Collections.Generic.ICollection<IServiceDescription> ChildServiceDescriptions
        {
            get { return GetRelatedObjects<IServiceDescription>("ChildServiceDescriptions"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildServiceDescriptions", value); }
        }
    
        public IServiceDescription PatentServiceDescription
        {
            get { return GetRelatedObject<IServiceDescription>("PatentServiceDescription"); }
            set { SetRelatedObject<IServiceDescription>("PatentServiceDescription", value); }
        }
        public System.Collections.Generic.ICollection<IEndpoint> Endpoints
        {
            get { return GetRelatedObjects<IEndpoint>("Endpoints"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Endpoints", value); }
        }
    
        public IServiceHostSettings ServiceHost
        {
            get { return GetRelatedObject<IServiceHostSettings>("ServiceHost"); }
            set { SetRelatedObject<IServiceHostSettings>("ServiceHost", value); }
        }
    
        public System.String ServiceHostId
        {
            get { return GetRelatedProperty<System.String>("ServiceHostId"); }
            set { SetRelatedProperty("ServiceHostId", value); }
        }
    
        public System.String Description
        {
            get { return GetRelatedProperty<System.String>("Description"); }
            set { SetRelatedProperty("Description", value); }
        }
        #endregion
    }

    public partial class ServiceHostParameter : BrightstarEntityObject, IServiceHostParameter 
    {
        public ServiceHostParameter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ServiceHostParameter(BrightstarEntityContext context) : base(context, typeof(ServiceHostParameter)) { }
        public ServiceHostParameter() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IServiceHostParameter
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    
        public System.String ServiceHostSettingsNameId
        {
            get { return GetRelatedProperty<System.String>("ServiceHostSettingsNameId"); }
            set { SetRelatedProperty("ServiceHostSettingsNameId", value); }
        }
    
        public System.Boolean IsSecureString
        {
            get { return GetRelatedProperty<System.Boolean>("IsSecureString"); }
            set { SetRelatedProperty("IsSecureString", value); }
        }
    
        public IServiceHostSettings ServiceHost
        {
            get { return GetRelatedObject<IServiceHostSettings>("ServiceHost"); }
            set { SetRelatedObject<IServiceHostSettings>("ServiceHost", value); }
        }
    
        public IServiceHostParameter Parent
        {
            get { return GetRelatedObject<IServiceHostParameter>("Parent"); }
            set { SetRelatedObject<IServiceHostParameter>("Parent", value); }
        }
        public System.Collections.Generic.ICollection<IServiceHostParameter> ChildParameters
        {
            get { return GetRelatedObjects<IServiceHostParameter>("ChildParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildParameters", value); }
        }
    
        public System.String ItemValue
        {
            get { return GetRelatedProperty<System.String>("ItemValue"); }
            set { SetRelatedProperty("ItemValue", value); }
        }
    
        public System.Byte[] BinaryValue
        {
            get { return GetRelatedProperty<System.Byte[]>("BinaryValue"); }
            set { SetRelatedProperty("BinaryValue", value); }
        }
    
        public System.Boolean IsEnvironmental
        {
            get { return GetRelatedProperty<System.Boolean>("IsEnvironmental"); }
            set { SetRelatedProperty("IsEnvironmental", value); }
        }
        public System.Collections.Generic.ICollection<ISubstitutionParameter> SubstitutionParameters
        {
            get { return GetRelatedObjects<ISubstitutionParameter>("SubstitutionParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubstitutionParameters", value); }
        }
        public System.Collections.Generic.ICollection<IEndpointParameter> EndpointParameters
        {
            get { return GetRelatedObjects<IEndpointParameter>("EndpointParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("EndpointParameters", value); }
        }
        #endregion
    }

    public partial class ServiceHostSettings : BrightstarEntityObject, IServiceHostSettings 
    {
        public ServiceHostSettings(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ServiceHostSettings(BrightstarEntityContext context) : base(context, typeof(ServiceHostSettings)) { }
        public ServiceHostSettings() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.IServiceHostSettings
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    
        public IConfigSet ConfigSet
        {
            get { return GetRelatedObject<IConfigSet>("ConfigSet"); }
            set { SetRelatedObject<IConfigSet>("ConfigSet", value); }
        }
    
        public System.String ConfigSetNameId
        {
            get { return GetRelatedProperty<System.String>("ConfigSetNameId"); }
            set { SetRelatedProperty("ConfigSetNameId", value); }
        }
    
        public IServiceHostSettings Parent
        {
            get { return GetRelatedObject<IServiceHostSettings>("Parent"); }
            set { SetRelatedObject<IServiceHostSettings>("Parent", value); }
        }
        public System.Collections.Generic.ICollection<IServiceHostSettings> Children
        {
            get { return GetRelatedObjects<IServiceHostSettings>("Children"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Children", value); }
        }
        public System.Collections.Generic.ICollection<IServiceHostParameter> Parameters
        {
            get { return GetRelatedObjects<IServiceHostParameter>("Parameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Parameters", value); }
        }
        public System.Collections.Generic.ICollection<IServiceDescription> Services
        {
            get { return GetRelatedObjects<IServiceDescription>("Services"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Services", value); }
        }
        public System.Collections.Generic.ICollection<IServiceHostSettings> UpstreamHosts
        {
            get { return GetRelatedObjects<IServiceHostSettings>("UpstreamHosts"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("UpstreamHosts", value); }
        }
        public System.Collections.Generic.ICollection<IServiceHostSettings> DownstreamHosts
        {
            get { return GetRelatedObjects<IServiceHostSettings>("DownstreamHosts"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("DownstreamHosts", value); }
        }
    
        public System.String Description
        {
            get { return GetRelatedProperty<System.String>("Description"); }
            set { SetRelatedProperty("Description", value); }
        }
    
        public System.String Visualization
        {
            get { return GetRelatedProperty<System.String>("Visualization"); }
            set { SetRelatedProperty("Visualization", value); }
        }
    
        public System.Int32 Level
        {
            get { return GetRelatedProperty<System.Int32>("Level"); }
            set { SetRelatedProperty("Level", value); }
        }
    
        public System.String Alias
        {
            get { return GetRelatedProperty<System.String>("Alias"); }
            set { SetRelatedProperty("Alias", value); }
        }
        #endregion
    }

    public partial class SubstitutionParameter : BrightstarEntityObject, ISubstitutionParameter 
    {
        public SubstitutionParameter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SubstitutionParameter(BrightstarEntityContext context) : base(context, typeof(SubstitutionParameter)) { }
        public SubstitutionParameter() : base() { }
        public System.String Id { get {return GetKey(); } set { SetKey(value); } }
        #region Implementation of Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter
    	
        [RegularExpression(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
        public System.String Name
        {
            get { return GetRelatedProperty<System.String>("Name"); }
            set { SetRelatedProperty("Name", value); }
        }
    
        public System.String EnvironmentNameId
        {
            get { return GetRelatedProperty<System.String>("EnvironmentNameId"); }
            set { SetRelatedProperty("EnvironmentNameId", value); }
        }
    
        public IEnvironment Environment
        {
            get { return GetRelatedObject<IEnvironment>("Environment"); }
            set { SetRelatedObject<IEnvironment>("Environment", value); }
        }
    
        public ISubstitutionParameter Parent
        {
            get { return GetRelatedObject<ISubstitutionParameter>("Parent"); }
            set { SetRelatedObject<ISubstitutionParameter>("Parent", value); }
        }
        public System.Collections.Generic.ICollection<ISubstitutionParameter> ChildParameters
        {
            get { return GetRelatedObjects<ISubstitutionParameter>("ChildParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildParameters", value); }
        }
    
        public System.String ItemValue
        {
            get { return GetRelatedProperty<System.String>("ItemValue"); }
            set { SetRelatedProperty("ItemValue", value); }
        }
    
        public System.Boolean IsSecure
        {
            get { return GetRelatedProperty<System.Boolean>("IsSecure"); }
            set { SetRelatedProperty("IsSecure", value); }
        }
        public System.Collections.Generic.ICollection<IServiceHostParameter> HostParameters
        {
            get { return GetRelatedObjects<IServiceHostParameter>("HostParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("HostParameters", value); }
        }
        public System.Collections.Generic.ICollection<IEndpointParameter> EndpointParameters
        {
            get { return GetRelatedObjects<IEndpointParameter>("EndpointParameters"); }
            set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("EndpointParameters", value); }
        }
        #endregion
    }
}